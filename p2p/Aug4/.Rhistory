hubscore    = nhubscore,
authorities = nauthorities
)#normalized values 8 variables
write.csv(ncentrality,"NCentrality_p2p_Gnutella04.csv")
write.csv(ncentrality2,"NCentrality_p2p_Gnutella04.csv")
M <- cor(ncentrality2)
corrplot(M, method = "circle") # correlation matrix
boxplot(ndegree, neigenvector, ncloseness, npagerank,ncrossclique,nbetweenness,nhubscore,nauthorities,
main = "Multiple boxplots for comparision",
at = c(1,2,3,4,5,6,7,8),
names = c("ndegree", "neigenvector", "ncloseness", "npagerank","ncrossclique","nbetweenness","nhubscore","nauthorities"),
las = 2,
col = c("orange","red"),
border = "brown",
horizontal = TRUE,
notch = TRUE
) #multiple boxplot
boxplot(ndegree, neigenvector, ncloseness, npagerank,ncrossclique,nbetweenness,nhubscore,nauthorities,
main = "Multiple boxplots for comparision",
at = c(1,2,3,4,5,6,7,8),
names = c("ndegree", "neigenvector", "ncloseness", "npagerank","ncrossclique","nbetweenness","nhubscore","nauthorities"),
las = 2,
col = c("orange","red"),
border = "brown",
horizontal = TRUE,
notch = FALSE
) #multiple boxplot
pcacen<-ncentrality#keeping ncentrality as it is
pcacen<-within(pcacen, rm(degree)) #without degree total 5 variables
pcacen2<-ncentrality2#keeping ncentrality2 as it is
pcacen2<-within(pcacen2, rm(degree)) #without degree total 7 variables
res.pca<-prcomp(scale(ncentrality),center=TRUE) #with degree 6 variables
res.pca2<-prcomp(scale(pcacen),center=TRUE) #without degree 5 variables
res.pca3<-prcomp(scale(ncentrality2),center=TRUE) #with degree 8 variables
res.pca4<-prcomp(scale(pcacen2),center=TRUE) #without degree 7 variables
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)#with degree 6 variables
fviz_pca_var(res.pca2,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)#without degree 5 variables
fviz_pca_var(res.pca3,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)#with degree 8 variables
fviz_pca_var(res.pca4,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)#without degree 7 variables
biplot(res.pca,scale=0, cex=.7)#biplot
biplot(res.pca2,scale=0, cex=.7)#biplot
biplot(res.pca3,scale=0, cex=.7)#biplot
biplot(res.pca4,scale=0, cex=.7)#biplot
ncen_tr<-transpose(ncentrality) #transpose ncentrality for lda
ncen_tr<-data.frame(names = c('degree','eigenvector','closeness','pagerank','crossclique','betweeness'),ncen_tr) #y label
ncen_tr<-transpose(ncentrality2) #transpose ncentrality for lda
ncen_tr<-data.frame(names = c('degree','eigenvector','closeness','pagerank','crossclique','betweeness','hubscore','authorities'),ncen_tr) #y label
set.seed(333)
tsne_model_6 = Rtsne(pcacen2, check_duplicates=FALSE, pca=TRUE, perplexity=30, theta=0.50, dims=2, max_iter = 1000,
verbose = TRUE, is_distance = FALSE, pca_center = TRUE, pca_scale = TRUE, num_threads = 6) #lowest error
plot(tsne_model_6$Y,col=ncen_tr$names, asp=1)
set.seed(323)
tsne_model_5 = Rtsne(ncentrality, check_duplicates=FALSE, pca=TRUE, perplexity=100, theta=0.10, dims=2, max_iter = 1500,
verbose = TRUE, is_distance = FALSE, pca_center = TRUE, pca_scale = TRUE, num_threads = 6) #lowest error
plot(tsne_model_5$Y,col=ncen_tr$names, asp=1)
set.seed(32)
tsne_model_4 = Rtsne(ncentrality, check_duplicates=FALSE, pca=TRUE, perplexity=50, theta=0.20, dims=2, max_iter = 2000,
verbose = TRUE, is_distance = FALSE, pca_center = TRUE, pca_scale = TRUE, num_threads = 7)
plot(tsne_model_4$Y,col=ncen_tr$names, asp=1)
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(ranpcacen2, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(pcacen2, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
d_tsne_1 = as.data.frame(tsne_model_5$Y) #list to dataframe
d_tsne_1_original=d_tsne_1 #keeping the original
wss <- function(k) {
kmeans(d_tsne_1, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
c1<-kmeans(pcacen2, 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c2<-kmeans(pcacen2, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c3<-kmeans(pcacen2, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c4<-kmeans(pcacen2, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#plot of clusters
p1 <- fviz_cluster(c1, geom = "point",  data = pcacen2) + ggtitle("k = 3")
p2 <- fviz_cluster(c2, geom = "point", data = pcacen2) + ggtitle("k = 4")
p3 <- fviz_cluster(c3, geom = "point",  data = pcacen2) + ggtitle("k = 5")
p4 <- fviz_cluster(c4, geom = "point",  data = pcacen2) + ggtitle("k = 6")
#grid arrangement
grid.arrange(p1, p2, p3, p4, nrow = 2)
#clustering for tsne model
c5<-kmeans(d_tsne_1, 4, iter.max = 20, nstart = 25,
d_tsne_1 = c("Hartigan-Wong"), trace=FALSE)
c6<-kmeans(d_tsne_1, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
p5 <- fviz_cluster(c5, geom = "point",  data = d_tsne_1) + ggtitle("k = 4")
p6 <- fviz_cluster(c6, geom = "point",  data = d_tsne_1) + ggtitle("k = 5")
grid.arrange(p5, p6, nrow = 1)
c5<-kmeans(d_tsne_1, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c6<-kmeans(d_tsne_1, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
p5 <- fviz_cluster(c5, geom = "point",  data = d_tsne_1) + ggtitle("k = 4")
p6 <- fviz_cluster(c6, geom = "point",  data = d_tsne_1) + ggtitle("k = 5")
grid.arrange(p5, p6, nrow = 1)
dbscan::kNNdistplot(pcacen2, k =  5)
abline(h = 0.017, lty = 2)
abline(h = 0.05, lty = 2)
abline(h = 0.07, lty = 2)
dbscan::kNNdistplot(pcacen2, k =  2)
abline(h = 0.07, lty = 2)
abline(h = 0.04, lty = 2)
set.seed(123)
res.db <- dbscan::dbscan(pcacen2, 0.04, 2)
fviz_cluster(res.db, ranpcacen, geom = "point")
fviz_cluster(res.db, pcacen2, geom = "point")
c4<-kmeans(ncentrality, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
plot(ncentrality, col = c4$cluster)
points(c4$centers, col = 1:6, pch = 8)
plot(tsne_model_5$Y, col = c4$cluster)
points(c4$centers, col = 1:6, pch = 8)
c4<-kmeans(pcacen, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
plot(pcacen, col = c4$cluster)
plot(tsne_model_6$Y, col = c4$cluster)
points(c4$centers, col = 1:6, pch = 8)
load("F:/Research/Azk1/Statistical Rank Test/p2p/Aug4/.RData")
library(igraph)
library(centiserve)
library(tidyverse)
library(factoextra)
library(fastnet)
library(Rtsne)
library(Plasmidprofiler)
library(MASS)
library(data.table)
library(corrplot)
library(tibble)
library(caret)
library(plyr)
library(gridExtra)
library(resample)
library(earth)
library(CINNA)
boxplot(ndegree, neigenvector, ncloseness, npagerank,ncrossclique,nbetweenness,nhubscore,nauthorities,
main = "Multiple boxplots for comparision",
at = c(1,2,3,4,5,6,7,8),
names = c("ndegree", "neigenvector", "ncloseness", "npagerank","ncrossclique","nbetweenness","nhubscore","nauthorities"),
las = 2,
col = c("orange","red"),
border = "brown",
horizontal = TRUE,
notch = FALSE
) #multiple boxplot
set.seed(32)
tsne_model_4 = Rtsne(ncentrality, check_duplicates=FALSE, pca=TRUE, perplexity=50, theta=0.20, dims=2, max_iter = 2000,
verbose = TRUE, is_distance = FALSE, pca_center = TRUE, pca_scale = TRUE, num_threads = 7)
plot(tsne_model_4$Y,col=ncen_tr$names, asp=1)
#tsne model 7
set.seed(358)
tsne_model_7 = Rtsne(ncentrality, check_duplicates=FALSE, pca=TRUE, perplexity=43, theta=0.20, dims=2, max_iter = 5000,
verbose = TRUE, is_distance = FALSE, pca_center = TRUE, pca_scale = TRUE, num_threads = 7)
plot(tsne_model_7$Y,col=ncen_tr$names, asp=1)
tsne_model_7 = Rtsne(ncentrality, check_duplicates=FALSE, pca=TRUE, perplexity=43, theta=0.10, dims=2, max_iter = 5000,
verbose = TRUE, is_distance = FALSE, pca_center = TRUE, pca_scale = TRUE, num_threads = 7)
plot(tsne_model_7$Y,col=ncen_tr$names, asp=1)
d_tsne_1 = as.data.frame(tsne_model_7$Y)
## keeping original data
d_tsne_1_original=d_tsne_1
## Creating k-means clustering model, and assigning the result to the data used to create the tsne
fit_cluster_kmeans=kmeans(scale(d_tsne_1), 6)
d_tsne_1_original$cl_kmeans = factor(fit_cluster_kmeans$cluster)
## Creating hierarchical cluster model, and assigning the result to the data used to create the tsne
fit_cluster_hierarchical=hclust(dist(scale(d_tsne_1))) #doesn't work due to lack of memory
## setting 3 clusters as output
d_tsne_1_original$cl_hierarchical = factor(cutree(fit_cluster_hierarchical, k=3))
plot_cluster=function(data, var_cluster, palette)
{
ggplot(data, aes_string(x="V1", y="V2", color=var_cluster)) +
geom_point(size=0.25) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=20) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal") +
scale_colour_brewer(palette = palette)
}
plot_k=plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent") #plot of tsne using kmeans
#plot_h=plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
#grid.arrange(plot_k, plot_k,  ncol=2)
grid.arrange(plot_k,ncol=1) #plotting tnse model 1 with kmeans
plot_h=plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
grid.arrange(plot_k, plot_k,  ncol=2)
grid.arrange(plot_k,ncol=1) #plotting tnse model 1 with kmeans
d_tsne_1 = as.data.frame(tsne_model_7$Y)
## keeping original data
d_tsne_1_original=d_tsne_1
## Creating k-means clustering model, and assigning the result to the data used to create the tsne
fit_cluster_kmeans=kmeans(scale(d_tsne_1), 6)
d_tsne_1_original$cl_kmeans = factor(fit_cluster_kmeans$cluster)
## Creating hierarchical cluster model, and assigning the result to the data used to create the tsne
fit_cluster_hierarchical=hclust(dist(scale(d_tsne_1))) #doesn't work due to lack of memory
## setting 3 clusters as output
d_tsne_1_original$cl_hierarchical = factor(cutree(fit_cluster_hierarchical, k=3))
plot_cluster=function(data, var_cluster, palette)
{
ggplot(data, aes_string(x="V1", y="V2", color=var_cluster)) +
geom_point(size=0.25) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=20) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal") +
scale_colour_brewer(palette = palette)
}
plot_h=plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
plot_k=plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent") #plot of tsne using kmeans
grid.arrange(plot_k, plot_k,  ncol=2)
d_tsne_1_original=tsne_model_7
d_tsne_1 =tsne_model_7
## Creating k-means clustering model, and assigning the result to the data used to create the tsne
fit_cluster_kmeans=kmeans(scale(d_tsne_1), 3)
d_tsne_1_original$cl_kmeans = factor(fit_cluster_kmeans$cluster)
## Creating hierarchical cluster model, and assigning the result to the data used to create the tsne
fit_cluster_hierarchical=hclust(dist(scale(d_tsne_1)))
## setting 3 clusters as output
d_tsne_1_original$cl_hierarchical = factor(cutree(fit_cluster_hierarchical, k=3))
plot_cluster=function(data, var_cluster, palette)
{
ggplot(data, aes_string(x="V1", y="V2", color=var_cluster)) +
geom_point(size=0.25) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=20) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal") +
scale_colour_brewer(palette = palette)
}
plot_k=plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent")
plot_h=plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
## and finally: putting the plots side by side with gridExtra lib...
library(gridExtra)
grid.arrange(plot_k, plot_h,  ncol=2)
names(ncentrality)
names(ncentrality2)
d <- dist(ncentrality2[,-1], method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
d <- dist(ncen_tr[,-1], method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
#-------------------test2---------------------------#
d <- dist(tsne_model_7, method = "euclidean")
#-------------------test2---------------------------#
d <- dist(tsne_model_7$Y, method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
check=kmeans(scale(ncentrality2), 5)
c1<-kmeans(ncentrality2, 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c2<-kmeans(ncentrality2, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c3<-kmeans(ncentrality2, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c4<-kmeans(ncentrality2, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
plot(ncentrality2, col = c4$cluster)
points(c4$centers, col = 1:6, pch = 8)
p1 <- fviz_cluster(c1, geom = "point",  data = ncentrality2) + ggtitle("k = 3")
p2 <- fviz_cluster(c2, geom = "point", data = ncentrality2) + ggtitle("k = 4")
p3 <- fviz_cluster(c3, geom = "point",  data = ncentrality2) + ggtitle("k = 5")
p4 <- fviz_cluster(c4, geom = "point",  data = ncentrality2) + ggtitle("k = 6")
#grid arrangement
grid.arrange(p1, p2, p3, p4, nrow = 2)
c1<-kmeans(ncentrality2[,-1], 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#plot of clusters
p1 <- fviz_cluster(c1, geom = "point",  data = ncentrality2) + ggtitle("k = 3")
c1<-kmeans(ncentrality2[,-1], 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#plot of clusters
p1 <- fviz_cluster(c1, geom = "point",  data = ncentrality2) + ggtitle("k = 3")
library(igraph)
library(centiserve)
library(tidyverse)
library(factoextra)
library(fastnet)
library(Rtsne)
library(Plasmidprofiler)
library(MASS)
library(data.table)
library(corrplot)
library(tibble)
library(caret)
library(plyr)
library(gridExtra)
library(resample)
library(earth)
library(CINNA)
c1<-kmeans(ncentrality2[,-1], 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#plot of clusters
p1 <- fviz_cluster(c1, geom = "point",  data = ncentrality2) + ggtitle("k = 3")
#grid arrangement
grid.arrange(p1, p2, p3, p4, nrow = 2)
plot(ncentrality2[-1], col = c4$cluster)
points(c4$centers, col = 1:6, pch = 8)
library(igraph)
library(centiserve)
library(tidyverse)
library(factoextra)
library(fastnet)
library(Rtsne)
library(Plasmidprofiler)
library(MASS)
library(data.table)
library(corrplot)
library(tibble)
library(caret)
library(plyr)
library(gridExtra)
library(resample)
library(earth)
library(CINNA)
library(ClusterR)
install.packages("ClusterR")
dat = as.matrix(ncentrality2)
dat = center_scale(dat)
center_scale <- function(x) {
scale(x, scale = FALSE)
}
dat = center_scale(dat)
gmm = GMM(dat, 2, "maha_dist", "random_subset", 10, 10)
library(ClusterR)
dat = as.matrix(ncentrality2)
dat = center_scale(dat)
gmm = GMM(dat, 2, "maha_dist", "random_subset", 10, 10)
View(gmm)
View(gmm)
View(gmm)
plot(gmm$centroids,gmm$covariance_matrices)
plot(gmm$centroids,gmm$Log_likelihood)
plot(gmm$centroids,gmm$weights)
k14<-kmeans(gmm$centroids, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
k14<-kmeans(gmm$centroids, 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
k14<-kmeans(gmm$centroids, 1, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
p1 <- fviz_cluster(k14, geom = "point",  data = ncentrality2) + ggtitle("k = 3")
grid.arrange(p1, nrow = 1)
p1 <- fviz_cluster(k14, geom = "point",  data = gmm) + ggtitle("k = 3")
p1 <- fviz_cluster(k14, geom = "point",  data = gmm$centroids) + ggtitle("k = 3")
grid.arrange(p1, nrow = 1)
install.packages("mclust")
library(igraph)
library(centiserve)
library(tidyverse)
library(factoextra)
library(fastnet)
library(Rtsne)
library(Plasmidprofiler)
library(MASS)
library(data.table)
library(corrplot)
library(tibble)
library(caret)
library(plyr)
library(gridExtra)
library(resample)
library(earth)
library(CINNA)
library(ClusterR)
library(mclust)
xyMclust <- Mclust(ncentrality2)
plot(xyMclust)
View(gmm)
gmm$centroids
gmm$Log_likelihood
View(tsne_model_7)
plot(gmm$Log_likelihood,tsne_model_7$Y)
plot(gmm$Log_likelihood,col=ncen_tr$names, asp=1)
plot(gmm$Log_likelihood,tsne_model_7$Y, col=ncen_tr$names, asp=1)
plot(gmm$Log_likelihood,tsne_model_7$Y, col=ncen_tr$names, asp=1)
plot(gmm$Log_likelihood,tsne_model_7$Y)
plot(gmm$Log_likelihood,tsne_model_7$Y, c=c(1,2,3,4,5,6,7,8))
plot(gmm$Log_likelihood,tsne_model_7$Y, col=c(1,2,3,4,5,6,7,8))
View(xyMclust)
summary(xyMclust)
summary(xyMclust, parameters = TRUE)
clustgmm <- Mclust(ncentrality2,5)
plot(clustgmm, what=c("classification"))
clustgmm$G
plot(clustgmm, "density")
plot(clustgmm, "bic")
plot(clustgmm, what=c("bic"))
plot(clustgmm, what=c("BIC"))
install.packages("kohonen")
library(kohonen)
data_train_matrix <- as.matrix(scale(ncentrality2))
# Create the SOM Grid - you generally have to specify the size of the
# training grid prior to training the SOM. Hexagonal and Circular
# topologies are possible
som_grid <- somgrid(xdim = 20, ydim=20, topo="hexagonal")
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
n.hood="circular")
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
n.hood=circular)
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
n.hood="circular")
plot(som_model, type="changes")
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- xyf(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
n.hood="circular")
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(data_train_matrix,
grid = som.grid,
rlen = 100,
alpha = c(0.05,0.01),
keep.data = TRUE,
n.hood = "circular",
toroidal = T)
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(data_train_matrix,
grid = som.grid,
rlen = 100,
alpha = c(0.05,0.01),
keep.data = FALSE,
n.hood = "circular",
toroidal = T)
help("kohonen")
