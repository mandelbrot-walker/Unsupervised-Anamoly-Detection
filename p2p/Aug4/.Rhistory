round(calinhara(tsne_model_1_var8$Y,c10$cluster),digits=3)
rm(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,p1,p2,p3,p4,p5)
bmp("dbscan_kneeplot_var6_degree.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var6_degree, k =  2)
abline(h = 0.01, lty = 2)
dev.off()
#---------------------------------------calculating h start------------------------------------------#
#bmp("dbscan_kneeplot_var6_degree.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var6_degree, k =  2)
abline(h = 0.1, lty = 2)
abline(h = 0.08, lty = 2)
abline(h = 0.05, lty = 2)
abline(h = 0.045, lty = 2)
#---------------------------------------calculating h start------------------------------------------#
#bmp("dbscan_kneeplot_var6_degree.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var6_degree, k =  2)
abline(h = 0.045, lty = 2)
abline(h = 0.055, lty = 2)
abline(h = 0.06, lty = 2)
#---------------------------------------calculating h start------------------------------------------#
#bmp("dbscan_kneeplot_var6_degree.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var6_degree, k =  2)
abline(h = 0.058, lty = 2)
abline(h = 0.062, lty = 2)
abline(h = 0.065, lty = 2)
abline(h = 0.067, lty = 2)
#---------------------------------------calculating h start------------------------------------------#
#bmp("dbscan_kneeplot_var6_degree.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var6_degree, k =  2)
abline(h = 0.067, lty = 2)
bmp("dbscan_kneeplot_var6_degree.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var6_degree, k =  2)
abline(h = 0.067, lty = 2)
dev.off()
dbscan::kNNdistplot(var5, k =  2)
abline(h = 0.067, lty = 2)
abline(h = 0.06, lty = 2)
bmp("dbscan_kneeplot_var5.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var5, k =  2)
abline(h = 0.06, lty = 2)
dev.off()
#bmp("dbscan_kneeplot_var6.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var6, k =  2)
abline(h = 0.06, lty = 2)
bmp("dbscan_kneeplot_var6.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var6, k =  2)
abline(h = 0.06, lty = 2)
dev.off()
bmp("dbscan_kneeplot_var7.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var7, k =  2)
abline(h = 0.06, lty = 2)
dev.off()
bmp("dbscan_kneeplot_var8.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var8, k =  2)
abline(h = 0.06, lty = 2)
dev.off()
#bmp("dbscan_kneeplot_var7.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var7, k =  2)
abline(h = 0.068, lty = 2)
bmp("dbscan_kneeplot_var7.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var7, k =  2)
abline(h = 0.068, lty = 2)
dev.off()
bmp("dbscan_kneeplot_var8.bmp", width = 841, height = 477)
dbscan::kNNdistplot(var8, k =  2)
abline(h = 0.068, lty = 2)
dev.off()
set.seed(123)
res.db <- dbscan::dbscan(ranvar, 0.01, 2)
gc()
bmp("dbscan_var6_degree.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var5, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(ranvar, 0.008, 2)
gc()
bmp("dbscan_var5.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var6, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(ranvar, 0.01, 2)
gc()
bmp("dbscan_var6.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var7, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(ranvar, 0.01, 2)
gc()
bmp("dbscan_var7.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var8, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(ranvar, 0.01, 2)
gc()
bmp("dbscan_var8.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
set.seed(123)
res.db <- dbscan::dbscan(var6_degree, 0.067, 2)
gc()
bmp("dbscan_var6_degree.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var5, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(var5, 0.06, 2)
gc()
bmp("dbscan_var5.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var6, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(var6, 0.06, 2)
gc()
bmp("dbscan_var6.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var7, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(var7, 0.068, 2)
gc()
bmp("dbscan_var7.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var8, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(var8, 0.068, 2)
gc()
bmp("dbscan_var8.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, ranvar, geom = "point")
dev.off()
set.seed(123)
res.db <- dbscan::dbscan(var6_degree, 0.067, 2)
gc()
bmp("dbscan_var6_degree.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, var6_degree, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var5, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(var5, 0.06, 2)
gc()
bmp("dbscan_var5.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, var5, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var6, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(var6, 0.06, 2)
gc()
bmp("dbscan_var6.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, var6, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var7, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(var7, 0.068, 2)
gc()
bmp("dbscan_var7.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, var7, geom = "point")
dev.off()
gc()
#ranvar<-sample_n(var8, 100000, replace = TRUE)
set.seed(123)
res.db <- dbscan::dbscan(var8, 0.068, 2)
gc()
bmp("dbscan_var8.bmp", width = 1980, height = 1280)
fviz_cluster(res.db, var8, geom = "point")
dev.off()
#-------------------Dataset and TSNE dendogram---------------------------#
d <- dist(var8, method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
rm(d,hc1)
dat = as.matrix(var5)
dat = center_scale(dat)
rm(dat)
xyMclust <- Mclust(var8, prior = priorControl(),
control = emControl(),
initialization = "subset",
warn = mclust.options("warn"),
x =  "mclustBIC",
verbose = TRUE )
xyMclust <- Mclust(var8, prior = priorControl(),
control = emControl(),
initialization = "subset",
warn = mclust.options("warn"),
x =  NULL,
verbose = TRUE )
xyMclust <- Mclust(as.matrix(var8), prior = priorControl(),
control = emControl(),
initialization = "subset",
warn = mclust.options("warn"),
x =  NULL,
verbose = TRUE )
xyMclust <- Mclust(as.matrix(var8), prior = priorControl(),
control = emControl(),
initialization = "subset",
warn = mclust.options("warn"),
verbose = TRUE)
xyMclust <- Mclust(as.matrix(var8), prior = priorControl(),
control = emControl(),
warn = mclust.options("warn"),
verbose = TRUE)
plot(xyMclust)
plot(mclustBIC(precip), legendArgs =  list(x = "bottomleft"))
plot(mclustBIC(faithful))
plot(mclustBIC(var8))
?mclustModelNames
summary(xyMclust, parameters = TRUE)
?Mclust
clustgmm <- Mclust(var8, G=2)
plot(clustgmm, what=c("classification"))
plot(clustgmm, "density")
save.image(".Rdata",safe = TRUE)
save.image("backup.Rdata",safe = TRUE)
set.seed(123)
x<-as.matrix(var6_degree) #var6_degree
sammon = do.sammon(x, ndim=2, initialize = "pca")
?do.sammon
sammon = do.sammon(x, ndim=2, preprocess = c("center", "scale"), initialize = "pca")
sammon = do.sammon(x, ndim=2, preprocess = c("center"), initialize = "pca")
bmp("sammon_var6_degree.bmp", width = 1280, height = 720)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(sammon$Y, pch=19, col=colors_v6_degree, main="var6_degree")
plot(sammon$Y, pch=19, col=c1$cluster, main="var6_degree with k=2")
par(opar)
dev.off()
c1<-kmeans(var6_degree, 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c2<-kmeans(var5, 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c3<-kmeans(var6, 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c4<-kmeans(var7, 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
c5<-kmeans(var8, 2, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
bmp("sammon_var6_degree.bmp", width = 1280, height = 720)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(sammon$Y, pch=19, col=colors_v6_degree, main="var6_degree")
plot(sammon$Y, pch=19, col=c1$cluster, main="var6_degree with k=2")
par(opar)
dev.off()
x<-as.matrix(var6_degree) #var6_degree
sammon = do.sammon(x, ndim=2, preprocess = c("center"), initialize = "pca")
bmp("sammon_var6_degree.bmp", width = 1280, height = 720)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(sammon$Y, pch=19, col=colors_v6_degree, main="var6_degree")
plot(sammon$Y, pch=19, col=c1$cluster, main="var6_degree with k=2")
par(opar)
dev.off()
x<-as.matrix(var5) #var5
sammon = do.sammon(x, ndim=2, preprocess = c("center"), initialize = "pca")
bmp("sammon_var5.bmp", width = 1280, height = 720)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(sammon$Y, pch=19, col=colors_v5, main="var5")
plot(sammon$Y, pch=19, col=c2$cluster, main="var5 k=2")
par(opar)
dev.off()
x<-as.matrix(var6) #var6
sammon = do.sammon(x, ndim=2, preprocess = c("center"), initialize = "pca")
bmp("sammon_var6.bmp", width = 1280, height = 720)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(sammon$Y, pch=19, col=colors_v6, main="var6")
plot(sammon$Y, pch=19, col=c3$cluster, main="var6 k=2")
par(opar)
dev.off()
x<-as.matrix(var7) #var7
sammon = do.sammon(x, ndim=2, preprocess = c("center"), initialize = "pca")
bmp("sammon_var7.bmp", width = 1280, height = 720)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(sammon$Y, pch=19, col=colors_v7, main="var7")
plot(sammon$Y, pch=19, col=c4$cluster, main="var7 k=2")
par(opar)
dev.off()
x<-as.matrix(var8) #var8
sammon = do.sammon(x, ndim=2, preprocess = c("center"), initialize = "pca")
bmp("sammon_var8.bmp", width = 1280, height = 720)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(sammon$Y, pch=19, col=colors_v8, main="var8")
plot(sammon$Y, pch=19, col=c5$cluster, main="var8 k=2")
par(opar)
dev.off()
rm(x,opar)
projectionpoints=NeRV(as.matrix(var8), neighbors = 90, randominit = T)
#------------NeRV----------------#
library(ProjectionBasedClustering)
projectionpoints=NeRV(as.matrix(var8), neighbors = 90, randominit = T)
gc()
#Computation of Generalized Umatrix
library(GeneralizedUmatrix)
visualization=GeneralizedUmatrix(Data = as.matrix(var8),projectionpoints)
TopviewTopographicMap(visualization$Umatrix,visualization$Bestmatches)
#or in 3D if rgl package exists
library(rgl)
plotTopographicMap(visualization$Umatrix,visualization$Bestmatches)
save.image(".Rdata",safe = TRUE)
save.image("backup.Rdata",safe = TRUE)
gc()
##Interactive Island Generation
## from a tiled Umatrix (toroidal assumption)
## Not run:
Imx = ProjectionBasedClustering::interactiveGeneralizedUmatrixIsland(visualization$Umatrix,
visualization$Bestmatches)
# Automatic Clustering
LC=c(visualization$Lines,visualization$Columns)
# number of Cluster from dendrogram or visualization (PlotIt=TRUE)
Cls=ProjectionBasedClustering(k=2, as.matrix(var8),visualization$Bestmatches, LC,PlotIt=TRUE)
gc()
?calinhara
?prcomp
install.packages("Gmedian")
?Gmedian
??Gmedian
res.pca6_degree<-dp.rpcag(var6_degree,ndin=2,k=10,preprocess = c("scale","center")) #  6 variables with degree
library(igraph)
library(centiserve)
library(tidyverse)
library(factoextra)
library(Rtsne)
library(Plasmidprofiler)
library(MASS)
library(data.table)
library(corrplot)
library(tibble)
library(caret)
library(plyr)
library(gridExtra)
library(CINNA)
library(ClusterR)
library(mclust)
library(kohonen)
library(kernlab)
library(Rdimtools)
library(scatterplot3d)
library(rgl)
library(fpc)
res.pca6_degree<-dp.rpcag(var6_degree,ndin=2,k=10,preprocess = c("scale","center")) #  6 variables with degree
res.pca6_degree<-do.rpcag(var6_degree,ndin=2,k=10,preprocess = c("scale","center")) #  6 variables with degree
res.pca6_degree<-do.rpcag(var6_degree,ndim = 2,k=10,preprocess = c("scale","center")) #  6 variables with degree
res.pca6_degree<-do.rpcag(var6_degree,ndim = 2,k=10,preprocess = c("scale")) #  6 variables with degree
res.pca6_degree<-do.rpcag(var6_degree,ndim = 2,k=10,preprocess = c("scale")) #  6 variables with degree
res.pca5<-do.rpcag(var5 = 2,k=10,preprocess = c("scale")) #  5 variables
res.pca6<-do.rpcag(var6 = 2,k=10,preprocess = c("scale")) #  6 variables
res.pca7<-do.rpcag(var7 = 2,k=10,preprocess = c("scale")) #  7 variables
res.pca8<-do.rpcag(var8 = 2,k=10,preprocess = c("scale")) #  8 variables
res.pca6_degree<-do.rpcag(var6_degree,ndim = 2,k=10,preprocess = c("scale")) #  6 variables with degree
res.pca5<-do.rpcag(var5,ndim  = 2,k=10,preprocess = c("scale")) #  5 variables
res.pca6<-do.rpcag(var6,ndim  = 2,k=10,preprocess = c("scale")) #  6 variables
res.pca7<-do.rpcag(var7,ndim  = 2,k=10,preprocess = c("scale")) #  7 variables
res.pca8<-do.rpcag(var8,ndim  = 2,k=10,preprocess = c("scale")) #  8 variables
#show pca values
print(res.pca6_degree)
p1<-fviz_eig(res.pca6_degree,addlabels = TRUE)#Scree plot 5 var
p2<-fviz_eig(res.pca5,addlabels = TRUE)#Scree plot 5 var
p3<-fviz_eig(res.pca6,addlabels = TRUE) #Scree plot 6 var
p4<-fviz_eig(res.pca7,addlabels = TRUE)#Scree plot 7 var
p5<-fviz_eig(res.pca8,addlabels = TRUE)#Scree plot 8 var
p1<-fviz_eig(as.data.frame(res.pca6_degree),addlabels = TRUE)#Scree plot 5 var
p2<-fviz_eig(as.data.frame(res.pca5),addlabels = TRUE)#Scree plot 5 var
p3<-fviz_eig(as.data.frame(res.pca6),addlabels = TRUE) #Scree plot 6 var
p4<-fviz_eig(as.data.frame(res.pca7),addlabels = TRUE)#Scree plot 7 var
p5<-fviz_eig(as.data.frame(res.pca8),addlabels = TRUE)#Scree plot 8 var
res.pca6_degree<-prcomp(scale(var6_degree),center=TRUE) #  6 variables with degree
res.pca5<-prcomp(scale(var5),center=TRUE) #  5 variables
res.pca6<-prcomp(scale(var6),center=TRUE) #  6 variables
res.pca7<-prcomp(scale(var7),center=TRUE) #  7 variables
res.pca8<-prcomp(scale(var8),center=TRUE) #  8 variables
View(res.pca5)
res.pca6_degree<-do.rpcag(var6_degree,ndim = 2,k=10,preprocess = c("scale")) #  6 variables with degree
res.pca5<-do.rpcag(var5,ndim  = 2,k=10,preprocess = c("scale")) #  5 variables
res.pca6<-do.rpcag(var6,ndim  = 2,k=10,preprocess = c("scale")) #  6 variables
res.pca7<-do.rpcag(var7,ndim  = 2,k=10,preprocess = c("scale")) #  7 variables
res.pca8<-do.rpcag(var8,ndim  = 2,k=10,preprocess = c("scale")) #  8 variables
View(res.pca5)
res.pca6_degree<-prcomp(scale(var6_degree),center=TRUE) #  6 variables with degree
res.pca5<-prcomp(scale(var5),center=TRUE) #  5 variables
res.pca6<-prcomp(scale(var6),center=TRUE) #  6 variables
res.pca7<-prcomp(scale(var7),center=TRUE) #  7 variables
res.pca8<-prcomp(scale(var8),center=TRUE) #  8 variables
View(res.pca5)
res.pca6_degree<-do.rpcag(var6_degree,ndim = 2,k=10,preprocess = c("scale")) #  6 variables with degree
res.pca5<-do.rpcag(var5,ndim  = 2,k=10,preprocess = c("scale")) #  5 variables
res.pca6<-do.rpcag(var6,ndim  = 2,k=10,preprocess = c("scale")) #  6 variables
res.pca7<-do.rpcag(var7,ndim  = 2,k=10,preprocess = c("scale")) #  7 variables
res.pca8<-do.rpcag(var8,ndim  = 2,k=10,preprocess = c("scale")) #  8 variables
p1<-fviz_eig(as.data.frame(res.pca6_degree$Y),addlabels = TRUE)#Scree plot 5 var
p1<-fviz_eig(res.pca6_degree$Y,addlabels = TRUE)#Scree plot 5 var
View(res.pca5)
Y1 = do.pca(res.pca6_degree$L, ndim=2)$Y
res.pca6_degree$L
plot(res.pca6_degree$Y, col=colors_v6_degree, main="RPCAG::k=5")
plot(res.pca5$Y, col=colors_v5, main="RPCAG::k=5")
plot(res.pca6$Y, col=colors_v6, main="RPCAG::k=5")
plot(res.pca7$Y, col=colors_v7, main="RPCAG::k=5")
plot(res.pca8$Y, col=colors_v8, main="RPCAG::k=5")
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,5))
plot(res.pca6_degree$Y, col=colors_v6_degree, main="RPCAG::k=5")
plot(res.pca5$Y, col=colors_v5, main="RPCAG::k=5")
plot(res.pca6$Y, col=colors_v6, main="RPCAG::k=5")
plot(res.pca7$Y, col=colors_v7, main="RPCAG::k=5")
plot(res.pca8$Y, col=colors_v8, main="RPCAG::k=5")
par(opar)
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,5))
plot(res.pca6_degree$Y, col=colors_v6_degree, main="RPCAG::k=5")
plot(res.pca5$Y, col=colors_v5, main="RPCAG::k=5")
plot(res.pca6$Y, col=colors_v6, main="RPCAG::k=5")
plot(res.pca7$Y, col=colors_v7, main="RPCAG::k=5")
plot(res.pca8$Y, col=colors_v8, main="RPCAG::k=5")
par(opar)
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,3))
plot(res.pca6_degree$Y, col=colors_v6_degree, main="RPCAG::k=5")
plot(res.pca5$Y, col=colors_v5, main="RPCAG::k=5")
plot(res.pca6$Y, col=colors_v6, main="RPCAG::k=5")
plot(res.pca7$Y, col=colors_v7, main="RPCAG::k=5")
plot(res.pca8$Y, col=colors_v8, main="RPCAG::k=5")
par(opar)
res.pca6_degree<-prcomp(scale(var6_degree),center=TRUE) #  6 variables with degree
res.pca5<-prcomp(scale(var5),center=TRUE) #  5 variables
res.pca6<-prcomp(scale(var6),center=TRUE) #  6 variables
res.pca7<-prcomp(scale(var7),center=TRUE) #  7 variables
res.pca8<-prcomp(scale(var8),center=TRUE) #  8 variables
c1<-kGmedian(var6_degree, ncenters=2, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c2<-kGmedian(var6_degree, ncenters=3, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c3<-kGmedian(var6_degree, ncenters=4, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c4<-kGmedian(var6_degree, ncenters=5, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
library(Gmedian)
c1<-kGmedian(var6_degree, ncenters=2, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c2<-kGmedian(var6_degree, ncenters=3, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c3<-kGmedian(var6_degree, ncenters=4, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c4<-kGmedian(var6_degree, ncenters=5, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
#plot of clusters
p1 <- fviz_cluster(c1, geom = "point",  data = var6_degree) + ggtitle("k = 2")
p2 <- fviz_cluster(c2, geom = "point", data = var6_degree) + ggtitle("k = 3")
p3 <- fviz_cluster(c3, geom = "point",  data = var6_degree) + ggtitle("k = 4")
p4 <- fviz_cluster(c4, geom = "point",  data = var6_degree) + ggtitle("k = 5")
bmp("kmeans_pca_var6_degree.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
View(c1)
p1 <- fviz_cluster(c1$cluster, geom = "point",  data = var6_degree) + ggtitle("k = 2")
p2 <- fviz_cluster(c2$cluster, geom = "point", data = var6_degree) + ggtitle("k = 3")
p3 <- fviz_cluster(c3$cluster, geom = "point",  data = var6_degree) + ggtitle("k = 4")
p4 <- fviz_cluster(c4$cluster, geom = "point",  data = var6_degree) + ggtitle("k = 5")
#plot of clusters
p1 <- fviz_cluster(as.data.frame(c1$cluster), geom = "point",  data = var6_degree) + ggtitle("k = 2")
plot(var6_degree, col = c1$cluster)
View(res.pca5)
plot(res.pca5$x, col = c1$cluster)
c1<-kGmedian(var6_degree, ncenters=2, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c2<-kGmedian(var5, ncenters=2, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c3<-kGmedian(var6, ncenters=2, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c4<-kGmedian(var7, ncenters=2, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
c5<-kGmedian(var8, ncenters=2, gamma=1.05, alpha=0.75, nstart = 25, nstartkmeans = 10,
iter.max = 20)
d_tsne_1_var6_degree = as.data.frame(tsne_model_1_var6_degree$Y) #list to dataframe var6 degree
d_tsne_1_var5 = as.data.frame(tsne_model_1_var5$Y) #list to dataframe var 5
d_tsne_1_var6 = as.data.frame(tsne_model_1_var6$Y) #list to dataframe var 6
d_tsne_1_var7 = as.data.frame(tsne_model_1_var7$Y) #list to dataframe var 7
d_tsne_1_var8 = as.data.frame(tsne_model_1_var8$Y) #list to dataframe var 8
plot(d_tsne_1_var6_degree, col = c1$cluster)
plot(d_tsne_1_var5, col = c2$cluster)
plot(d_tsne_1_var6, col = c3$cluster)
plot(d_tsne_1_var7, col = c4$cluster)
plot(d_tsne_1_var8, col = c5$cluster)
rm(d_tsne_1_var6_degree,d_tsne_1_var5,d_tsne_1_var6, d_tsne_1_var7, d_tsne_1_var8)
rm(c1,c2,c3,c4,c5)
TopviewTopographicMap(visualization$Umatrix,visualization$Bestmatches)
#------------NeRV----------------#
library(ProjectionBasedClustering)
TopviewTopographicMap(visualization$Umatrix,visualization$Bestmatches)
#Computation of Generalized Umatrix
library(GeneralizedUmatrix)
TopviewTopographicMap(visualization$Umatrix,visualization$Bestmatches)
plotTopographicMap(visualization$Umatrix,visualization$Bestmatches)
