type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m9
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m9, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m9.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
wss <- function(k) {
kmeans(m1, k, nstart = 20 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
warnings()
wss <- function(k) {
kmeans(m1, k, nstart = 25 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
wss <- function(k) {
kmeans(m1, k, nstart = 10, iter.max = 20)$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
wss <- function(k) {
kmeans(m1, k, nstart = 10, iter.max = 20, algorithm = c("Lloyd"))$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
warnings()
wss <- function(k) {
kmeans(m1, k, nstart = 10, iter.max = 20, algorithm = c("MacQueen"))$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
warnings()
wss <- function(k) {
kmeans(m1, k, nstart = 10, iter.max = 30, algorithm = c("MacQueen"))$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
wss <- function(k) {
kmeans(m1, k, nstart = 10, iter.max = 30, algorithm = c("Forgy"))$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
wss <- function(k) {
kmeans(m1, k, nstart = 30, iter.max = 50, algorithm = c("Lloyd"))$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
warnings()
wss <- function(k) {
kmeans(m1, k, nstart = 30, iter.max = 50, algorithm = c("Hartigan-Wong"))$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
wss <- function(k) {
kmeans(m1, k, nstart = 30, iter.max = 50, algorithm = c("MacQueen"), method = c("centers"))$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
wss <- function(k) {
kmeans(m1, k, nstart = 10, iter.max = 20, algorithm = c("MacQueen"))$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
wss <- function(k) {
kmeans(m1, k, nstart = 10, iter.max = 20)$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
wss <- function(k) {
kmeans(m1, k, nstart = 10, iter.max = 20)$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m1.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
wss <- function(k) {
kmeans(m1, k, nstart = 10)$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m1.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m2
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m2, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m2.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m3
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m3, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m3.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m4
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m4, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m4.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m5
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m5, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m5.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m6
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m6, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m6.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m7
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m7, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m7.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m8
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m8, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m8.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
##  m9
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(m9, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
bmp("kmeans_kneeplot_m9.bmp", width = 1280, height = 720)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares") #kneeplot
dev.off()
ck1<-kmeans(m1, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m1, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m1, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m1, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m1,ck1$cluster),digits=3) #  7733.985
round(calinhara(m1,ck2$cluster),digits=4) #  7985.291 highest
round(calinhara(m1,ck3$cluster),digits=5) #  6959.628
round(calinhara(m1,ck4$cluster),digits=6) #  6348.964
p1 <- fviz_cluster(ck1, geom = "point", data = m1) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m1) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m1) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m1) + ggtitle("k = 6")
bmp("kmeans_pca_m1.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
ck1<-kmeans(m2, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m2, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m2, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m2, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m2,ck1$cluster),digits=3) #  7703.294
round(calinhara(m2,ck2$cluster),digits=4) #  8037.741 highest
round(calinhara(m2,ck3$cluster),digits=5) #  7001.544
round(calinhara(m2,ck4$cluster),digits=6) #  6370.787
p1 <- fviz_cluster(ck1, geom = "point", data = m2) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m2) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m2) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m2) + ggtitle("k = 6")
bmp("kmeans_pca_m2.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
ck1<-kmeans(m3, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m3, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m3, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m3, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m3,ck1$cluster),digits=3) #  7649.803
round(calinhara(m3,ck2$cluster),digits=4) #  7698.748
round(calinhara(m3,ck3$cluster),digits=5) #  7738.866
round(calinhara(m3,ck4$cluster),digits=6) #  7787.33 highest
round(calinhara(m3,ck4$cluster),digits=7) #  33855.41 highest
p1 <- fviz_cluster(ck1, geom = "point", data = m3) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m3) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m3) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m3) + ggtitle("k = 6")
bmp("kmeans_pca_m3.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
ck1<-kmeans(m4, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m4, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m4, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m4, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m4,ck1$cluster),digits=3) #  9030.761
round(calinhara(m4,ck2$cluster),digits=4) #  10646.54 highest
round(calinhara(m4,ck3$cluster),digits=5) #  9468.393
round(calinhara(m4,ck4$cluster),digits=6) #  8854.677
p1 <- fviz_cluster(ck1, geom = "point", data = m4) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m4) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m4) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m4) + ggtitle("k = 6")
bmp("kmeans_pca_m4.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
ck1<-kmeans(m5, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m5, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m5, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m5, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m5,ck1$cluster),digits=3) #  8841.458
round(calinhara(m5,ck2$cluster),digits=4) #  9615.578 highest
round(calinhara(m5,ck3$cluster),digits=5) #  8563.109
round(calinhara(m5,ck4$cluster),digits=6) #  7967.682
p1 <- fviz_cluster(ck1, geom = "point", data = m5) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m5) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m5) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m5) + ggtitle("k = 6")
bmp("kmeans_pca_m5.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
ck1<-kmeans(m6, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m6, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m6, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m6, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m6,ck1$cluster),digits=3) #  16450.43 highest
round(calinhara(m6,ck2$cluster),digits=4) #  14770.27
round(calinhara(m6,ck3$cluster),digits=5) #  14848.32
round(calinhara(m6,ck4$cluster),digits=6) #  14466.01
round(calinhara(m6,ck4$cluster),digits=7) #  22331.73 highest
ck4<-kmeans(m5, 6, iter.max = 20, nstart = 25,
algorithm = c("Floyd"), trace=FALSE)
ck4<-kmeans(m5, 6, iter.max = 20, nstart = 25,
algorithm = c("Lloyd"), trace=FALSE)
warnings()
ck1<-kmeans(m6, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m6, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m6, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m6, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m6,ck1$cluster),digits=3) #  21602.11
round(calinhara(m6,ck2$cluster),digits=4) #  20815.63
round(calinhara(m6,ck3$cluster),digits=5) #  22084.75
round(calinhara(m6,ck4$cluster),digits=6) #  22331.73 highest
p1 <- fviz_cluster(ck1, geom = "point", data = m6) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m6) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m6) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m6) + ggtitle("k = 6")
bmp("kmeans_pca_m6.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
ck1<-kmeans(m7, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m7, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m7, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m7, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m7,ck1$cluster),digits=3) #  8412.904
round(calinhara(m7,ck2$cluster),digits=4) #  8478.609 highest
round(calinhara(m7,ck3$cluster),digits=5) #  7935.222
round(calinhara(m7,ck4$cluster),digits=6) #  8114.244
round(calinhara(m7,ck4$cluster),digits=7) #  31923.31 highest
p1 <- fviz_cluster(ck1, geom = "point", data = m7) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m7) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m7) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m7) + ggtitle("k = 6")
bmp("kmeans_pca_m7.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
ck1<-kmeans(m8, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m8, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m8, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m8, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m8,ck1$cluster),digits=3) #  18717.68 highest
round(calinhara(m8,ck2$cluster),digits=4) #  17385.23
round(calinhara(m8,ck3$cluster),digits=5) #  16981.55
round(calinhara(m8,ck4$cluster),digits=6) #  16352.07
p1 <- fviz_cluster(ck1, geom = "point", data = m8) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m8) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m8) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m8) + ggtitle("k = 6")
bmp("kmeans_pca_m8.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
#--------------clusters using different k values m9
ck1<-kmeans(m9, 3, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck2<-kmeans(m9, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck3<-kmeans(m9, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ck4<-kmeans(m9, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
#  Checking for correct no of clusters. Higher the index value better the cluster
round(calinhara(m9,ck1$cluster),digits=3) #  14642.38 highest
round(calinhara(m9,ck2$cluster),digits=4) #  12906.56
round(calinhara(m9,ck3$cluster),digits=5) #  11824.88
round(calinhara(m9,ck4$cluster),digits=6) #  11635.55
p1 <- fviz_cluster(ck1, geom = "point", data = m9) + ggtitle("k = 3")
p2 <- fviz_cluster(ck2, geom = "point", data = m9) + ggtitle("k = 4")
p3 <- fviz_cluster(ck3, geom = "point", data = m9) + ggtitle("k = 5")
p4 <- fviz_cluster(ck4, geom = "point", data = m9) + ggtitle("k = 6")
bmp("kmeans_pca_m9.bmp", width = 1920, height = 1280)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
c_ncentrality<-kmeans(ncentrality, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
bmp("kmeans_ncentrality_k4.bmp", width = 1920, height = 1280)
rm(ck1,ck2,ck3,ck4,p1,p2,p3,p4)
ckm1<-kmeans(m1, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ckm2<-kmeans(m2, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ckm3<-kmeans(m3, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ckm4<-kmeans(m4, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ckm5<-kmeans(m5, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ckm6<-kmeans(m6, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ckm7<-kmeans(m7, 6, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ckm8<-kmeans(m8, 5, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
ckm9<-kmeans(m9, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
library(igraph)
library(centiserve)
library(tidyverse)
library(factoextra)
library(Rtsne)
library(Plasmidprofiler)
library(MASS)
library(data.table)
library(corrplot)
library(tibble)
library(caret)
library(plyr)
library(gridExtra)
library(CINNA)
library(ClusterR)
library(mclust)
library(kohonen)
library(kernlab)
library(Rdimtools)
library(scatterplot3d)
library(rgl)
library(fpc)
library(uwot)
c_ncentrality<-kmeans(ncentrality, 4, iter.max = 20, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
bmp("kmeans_ncentrality_k4.bmp", width = 1920, height = 1280)
bmp("kmeans_ncentrality_k4.bmp", width = 1920, height = 1280)
bmp("kmeans_ncentrality_k4.bmp", width = 1920, height = 1280)
fviz_cluster(c_ncentrality, geom = "point", data = ncentrality) + ggtitle("k = 4")
dev.off()
plot(c_ncentrality)
bmp("kmeans_ncentrality_k4.bmp", width = 1920, height = 1280)
plot(ncentrality, col = c_ncentrality$cluster)
points(c_ncentrality$centers, col = 1:8, pch = 8)
dev.off()
